from sys import maxint as MAXINT
from collections import OrderedDict
from time import time
import shared
STREAM_DATA = 'https://api.twitch.tv/kraken/streams/{channel_name}'
STREAM_TOKEN = 'https://api.twitch.tv/api/channels/{id}/access_token'
STREAM_URL = ('http://usher.twitch.tv/api/channel/hls/{id}.m3u8'
              '?token={token}&sig={sig}&allow_source=true')
VOD_DATA = 'https://api.twitch.tv/kraken/{vod_type}/{vod_id}'
VOD_TOKEN = 'https://api.twitch.tv/api/vods/{id}/access_token'
VOD_URL = ('http://usher.twitch.tv/vod/{id}'
           '?nauth={token}&nauthsig={sig}&allow_source=true')
TWITCH_CLIENT_ID = 'r797t9e3qhgxayiisuqdxxkh5tj7mlz'
ACCEPTED_VOD_TYPES = ["v"]
# arbitrary resolution values so the client can distinguish them
HLS_RESOLUTIONS = OrderedDict([("Source", 1080),
                               ("High", 720),
                               ("Medium", 480),
                               ("Low", 360),
                               ("Mobile", 226)])
# map the old quality names to the newer ones
HLS_RESOLUTIONS_NEW = {'Source': '1080p60',
                       'High': '720p60',
                       'High2': '720p30',
                       'Medium': '540p30',
                       'Medium2': '480p30',
                       'Low': '360p30',
                       'Low2': '240p30',
                       'Mobile': '144p30'}


def NormalizeURL(url):
    return url.split('?')[0].split('#')[0].rstrip('/')


def MetadataObjectForURL(url):
    if is_stream(url):
        user_id = get_id(url)
        try:
            video = JSON.ObjectFromURL(STREAM_DATA.format(channel_name=user_id), cacheTime=0, headers={'Client-ID': TWITCH_CLIENT_ID})
        except Exception as e:
            Log.Error('TWITCH: Unable to get stream metadata.\n' + str(e))
            raise Ex.MediaNotAvailable
        else:
            if video['stream'] is None:
                raise Ex.LiveMediaNotStarted
            stream_info = video['stream']
            channel_info = stream_info['channel']
        # make the thumbnail only valid for ~100 seconds
        thumb = "{}?t={:.0f}".format(stream_info['preview']['large'], round(time(), -2))
        return VideoClipObject(
            title=unicode('{} - {}'.format(channel_info['display_name'],
                                           channel_info.get('game', '?'))),
            summary=unicode('{}\n\n{} viewers'.format(channel_info.get('status', '?'),
                                                      stream_info['viewers'])),
            thumb=Resource.ContentsOfURLWithFallback(thumb)
        )
    elif is_vod(url):
        vod_id = get_id(url)
        vod_type = get_vod_type(url)
        try:
            video = JSON.ObjectFromURL(VOD_DATA.format(vod_type=vod_type, vod_id=vod_id),
                                       cacheTime=0, headers={'Client-ID': TWITCH_CLIENT_ID})
        except Exception as e:
            Log.Error('TWITCH: Unable to get vod metadata.\n' + str(e))
            raise Ex.MediaNotAvailable
        else:
            if 'error' in video:
                raise Ex.MediaNotAvailable
        return VideoClipObject(
            title=unicode(video['title']),
            summary=unicode(video['description']),
            thumb=Resource.ContentsOfURLWithFallback(video['preview']),
            duration=min(int(video['length']) * 1000, MAXINT)
        )
    else:
        raise Ex.MediaNotAvailable


def MediaObjectsForURL(url):
    quality_option = (Prefs['stream_quality_selection'] if is_stream(url) else
                      Prefs['vod_quality_selection'])

    if quality_option == "Manual":
        return [
            MediaObject(
                protocol='hls',
                container='mpegts',
                video_codec=VideoCodec.H264,
                audio_codec=AudioCodec.AAC,
                audio_channels=2,
                optimized_for_streaming=True,
                video_resolution=resolution,
                parts=[PartObject(key=Callback(PlayHLS, url=url, quality=quality, ext='m3u8'))]
            ) for quality, resolution in HLS_RESOLUTIONS.iteritems()
        ]
    elif quality_option in HLS_RESOLUTIONS:  # explicit quality selection
        return [
            MediaObject(
                protocol='hls',
                container='mpegts',
                video_codec=VideoCodec.H264,
                audio_codec=AudioCodec.AAC,
                audio_channels=2,
                optimized_for_streaming=True,
                video_resolution=HLS_RESOLUTIONS[quality_option],
                parts=[PartObject(key=Callback(PlayHLS, url=url,
                                               quality=quality_option, ext='m3u8'))]
            )
        ]
    else:  # automatic (let plex handle it)
        return [
            MediaObject(
                protocol='hls',
                container='mpegts',
                video_codec=VideoCodec.H264,
                audio_codec=AudioCodec.AAC,
                audio_channels=2,
                optimized_for_streaming=True,
                parts=[PartObject(key=Callback(PlayHLS, url=url, ext='m3u8'))]
            )
        ]


@indirect
def PlayHLS(url, quality=None, **kwargs):
    url, access_token = shared.parse_service_url(url)
    playlist_url = get_playlist(url, access_token)
    if quality is None:
        final_url = playlist_url
    else:
        Log("TWITCH: Quality = " + quality)
        try:
            playlist_contents = HTTP.Request(playlist_url, cacheTime=0, headers={'Client-ID': TWITCH_CLIENT_ID}).content
        except Ex.HTTPError as e:
            Log.Error('TWITCH: PlayHLS: {} - {}'.format(e.code, e.reason))
            if e.code == 403:
                Log.Error(('TWITCH: PlayHLS: You are not authorized to view this video. '
                           'You must be subscribed to this channel. '
                           'Check your auth token in the channel preferences.'))
            raise Ex.MediaNotAuthorized
        final_url = get_twitch_quality(playlist_contents, quality)

    Log("TWITCH: Final Url = " + final_url)
    return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(final_url))


################################################################################
def get_playlist(url, access_token=None):
    """Given a valid twitch url and optional oauth token, return url to the master playlist."""
    item_id = get_id(url)
    token_url, video_url = (STREAM_TOKEN, STREAM_URL) if is_stream(url) else (VOD_TOKEN, VOD_URL)
    try:
        turl = token_url.format(id=item_id)
        if access_token is not None:
            turl += '?oauth_token=' + access_token
        token = JSON.ObjectFromURL(turl, cacheTime=0, headers={'Client-ID': TWITCH_CLIENT_ID})
        Log.Debug('token: {}'.format(token))
    except Exception as e:
        Log.Error('TWITCH: PlayHLS: {}'.format(e))
        raise Ex.MediaNotAvailable
    else:
        return video_url.format(id=item_id,
                                token=String.Quote(token['token']),
                                sig=String.Quote(token['sig']))


def get_id(url):
    if is_stream(url):
        return url.split('/')[-1]
    elif is_vod(url):
        return url.split('/')[-1]
    else:
        Log.Error('TWITCH: cant get id from url.')
        raise Ex.MediaNotAvailable


def is_stream(url):
    return len(url.split('/')) == 4


def is_vod(url):
    return 'videos' in url


def get_vod_type(url):
    return url.split('/')[-2]


def parse_m3u(playlist):
    parsed = {}
    lines = playlist.splitlines()
    for i, line in enumerate(lines):
        if not line.startswith('#EXT-X-MEDIA'):
            continue
        name_pos = line.find('GROUP-ID="')
        if name_pos < 0:
            continue
        name = line[name_pos + 10:].split('"')[0]
        url = lines[i + 2] if i + 2 < len(lines) else None
        parsed[name] = url
    return parsed


def get_twitch_quality(playlist, quality):
    parsed = parse_m3u(playlist)
    Log("TWITCH: Playlists = " + repr(parsed))
    if quality == 'Source':
        Log.Debug("TWITCH: Returning source stream. 'chunked'")
        return parsed['chunked']
    elif quality.lower() in parsed:
        Log.Debug("TWITCH: Old quality is available. '{}'".format(quality.lower()))
        return parsed[quality.lower()]
    elif HLS_RESOLUTIONS_NEW[quality] in parsed:
        Log.Debug("TWITCH: New quality is available. {}".format(HLS_RESOLUTIONS_NEW[quality]))
        return parsed[HLS_RESOLUTIONS_NEW[quality]]
    Log.Debug("TWITCH: couldn't select a quality. using '{}'".format(parsed.keys()[0]))
    return parsed[parsed.keys()[0]]
